

Expr: # something that can be assigned to or returned directly
    BnfCall(name:str,args:str)# -> "p.{name}({args})"
    Or(left:Expr,right:Expr) # same as GeneralOr but each branch is a single expr
    MacroCall(name:str,args:[Seq])
    Maybe(items:Expr) # evals to a bool
    Quoted(val:str) # trivially translated to Regex. oh wait not totally trivial insert escapes where needed
    Regex(re:str,control:[str]) # regexes yield the entire string they capture (unless `control` says otherwise)
    KleenePlus(val:Expr])
    KleeneStar(val:Expr)
    Asn(name:str,val:Expr)# -> "{name} = {val}"
    Seq(items:[Expr])

Production(items:Seq,rhs:str)
Decorator(name:str)

BnfFn(name:str,argnames:[str],rules:[Production],decos:[Decorator])
MacroFn(name:str,argnames:[str],rules:[Production],decos:[Decorator])
PdefFn(text:str)

