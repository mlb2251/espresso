

Atom: # something that can be assigned to or returned directly
    BnfCall(name:str,args:str)# -> "p.{name}({args})"
    Or(left:Seq,right:Seq)
    MacroCall(name:str,args:[Seq])
    Maybe(seq:Seq) # evals to a bool
    Quoted(val:str) # trivially translated to Regex. oh wait not totally trivial insert escapes where needed
    Regex(re:str,control:[str]) # regexes yield the entire string they capture (unless `control` says otherwise)
    KleenePlus(val:Seq])
    KleeneStar(val:Seq)
    Asn(name:str,seq:Seq)# -> "{name} = {val}"
    Seq(items:[Atom]) # Seqs can have sub seqs like (a b c (d e f))

Aux:
    Production(seq:Seq,rhs:str?)
    Decorator(name:str)

Fn:
    BnfFn(name:str,argnames:[str],rules:[Production],decos:[Decorator])
    MacroFn(name:str,argnames:[str],rules:[Production],decos:[Decorator])
    PdefFn(text:str)


## making some decisions:
# ((a:b)*)* means 'a' is a list of lists.
# all Atoms return dicts of varname->val
# Maybe returns an empty dict on failure
# Seq returns the union of all its dicts and throws an error on key clashes
# Or returns one of the dicts of its atoms
# Asn returns a single item dict
# Kleene constructs a list of dicts while keeping track of the number of times its run (N), then inverts it to a dict of length-N lists padded with Nones.
# All other atoms default to empty dict, not whatever they eval to (for example a bnfcall in a seq evals to an empty dict whereas an {Asn of a bnfcall} in a seq evals to a singleton dict.
# Asn is the only way to create new nonempty dicts
    #Asn(BnfCall) assigns to whatever p.whatever() returns
    #Asn(Maybe) returns True or False
    #Asn(Or) is rearranged to Or(Asn) like x:(a|b|c) -> (x:a|x:b|x:c). So Asn distributes over Or
    #Asn(Seq) throws an error on non singleton Seqs.
    #Asn(Kleene) returns the number of times it ran

#
# Seq -> fn() but first `def fn` side effect
# Or -> 
# KPlus -> 
# Asn -> 


# everything is an expression but some expressions (like Seq w len > 1) eval to UNDEF

# b.append(pynode_stmt)
# b.desugar(mynode)
# should .parse be .parse(text,type=object)? Then it could even do unwrapping/wrapping for singleton Suites and such

# todo:
# Node.tuple
# Node.parent(cls=object)
# rename "Stmt" to smtg else more relevant...
# logical_xor keeping track of what almost succeeded
# defaults for FuncDef(fname=name) etc
# Var/FuncDef.path should give a name that references the var/func. This can just be done in terms of globals() to avoid local overrides.
# left_recursion autodetection (for bnf itself too!)
# note that "*" is more than you think. it's greedy but you fail later it'll backtrack and try a shorter match. Perhaps thats not needed for this though?


