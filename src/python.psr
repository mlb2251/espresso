### https://docs.python.org/3/reference/lexical_analysis.html#literals
### ^^^ work through this from top to bottom is the next step do it. it's important. once it's done everything will work nicely. encodings and all.

# also you should write a lexer, itll be really quick

# note that sometimes things are ordered within a bnf list of productions so you shouldnt optimize. Maybe have a special flag for optimizing a bnf and just do it for stuff where order doesnt matter (ie xor situations) like simple_stmt

#For BNF writing note that using the ternary on the RHS is NOT proper style. Either split into more production rule branches, or abstract away. For example:
# a [b] c d -> 
# is the same as
# a b c d ->
# a c d ->
# and another option is to pull `b` and any related things into a separate helper rule that outputs the right value

_COMMA_LIST(x) ::=
    v1:x ("," v2:x)* -> [v1,*v2]
COMMA_LIST_NONEMPTY(x) ::=
    v:_COMMA_LIST(x) [","] -> v
COMMA_LIST_EMPTY(x) ::= # allow empty list ie consume nothing and yield []
    COMMA_LIST_NONEMPTY(x)
    pass -> []
COMMA_LIST_NONEMPTY_HASCOMMA(x) ::= # has at least one comma
    v1:x "," v2:_COMMA_LIST(x) -> [v1,*v2]
    v1:x "," -> [v1]

COMMA_LIST_NONEMPTY_NOTRAILING(x) ::=
    _COMMA_LIST(x)
COMMA_LIST_EMPTY_NOTRAILING(x) ::= # allow empty list ie consume nothing and yield []
    _COMMA_LIST(x)
    pass -> []
STARRED(x) ::=
    "*" v:x -> Starred(v)
DSTARRED(x) ::=
    "**" v:x -> DStarred(v)

OR_ALIAS(x) ::=
    v:x "as" name:identifier -> Alias(v,name)
    x

dotted_name ::= # yields [str]
    NO_TRAILING_WS((v1:identifier ".")*) v2:identifier -> [*v1,v2]

@unordered
atom ::=
    identifier | literal | enclosure

# "identifier ::=" definition is a pdef inside of Parser

@unordered
enclosure ::=
    parenth_form | list_display | dict_display | set_display | generator_expression | yield_atom

# DEVIATION: added boolliteral and noneliteral and ellipsisliteral
@unordered
literal ::=
    REGEX(stringliteral) | REGEX(bytesliteral) | REGEX(integer) | REGEX(floatnumber) | REGEX(imagnumber) | boolliteral | noneliteral | ellipsisliteral

# these will all be used in lex instead of yacc

# for speed all these could be combined into one big regex if you wanted to. Prob minimal difference and less readable though
 ###integer = "({decinteger}|{bininteger}|{octinteger}|{hexinteger})"
 ###decinteger = "(([1-9](_?\d)+)|(0+(_?0)*))"
 ###    #nonzerodigit (["_"] digit)* | "0"+ (["_"] "0")*
 ###bininteger = "(0(b|B)(_?(0|1))+)"
 ###    #"0" ("b" | "B") (["_"] bindigit)+
 ###octinteger = "(0(o|O)(_?[0-7])+)"
 ###    #"0" ("o" | "O") (["_"] octdigit)+
 ###hexinteger = "(0(x|X)(_?[0-9a-fA-F])+)"
 ###    #"0" ("x" | "X") (["_"] hexdigit)+
 ###
 ###floatnumber = "({pointfloat}|{exponentfloat})"
 ###pointfloat = "(({digitpart}?{fraction})|({digitpart}\.))"
 ###exponentfloat = "(({digitpart}|{pointfloat}){exponent})"
 ###digitpart = "(\d(_?\d)*)"
 ###fraction = "\.{digitpart}"
 ###exponent = "((e|E)(+|-)?{digitpart})"
 ###
 ###imagnumber = "(({floatnumber}|{digitpart})(j|J))"
 ###
 #### Note we assume all strings are in 'raw' mode since thats how theyll be read during f.read() of *.psr. So '\\.' is the same as r'\\.' meaning match the backslash then match any character
 ###stringliteral =  "({stringprefix}?({shortstring}|{longstring}))"
 ###quote = "(?P<quotechar>('|\"))"
 ###triquote = "(?P<quotechar>('''|\"\"\"))"
 ###stringprefix = "(([rR][fF])|([fF][rR])|[ruRUfF])"
 ###shortstring =  "({quote}{shortstringitem}*(?P=quotechar))"
 ###longstring =  "({triquote}longstringitem*(?P=quotechar))"
 ###shortstringitem = "({shortstringchar}|{stringescapeseq})"
 ###longstringitem = "({longstringchar}|{stringescapeseq})"
 ###shortstringchar = "(([^\\\n])(?!(?P=quotechar)))" # ?! is a negative lookahead
 ####shortstringchar ::=  <any source character except "\" or newline or the quote>
 ###longstringchar = "([^\\])"
 ####longstringchar ::=  <any source character except "\">
 ###stringescapeseq = "(\\.)"
 ####stringescapeseq ::=  "\" <any source character>
 ###
 ###
 ###bytesliteral =  "({bytesprefix}?({shortbytes}|{longbytes}))"
 ###bytesprefix = "(([bB][rR])|([rR][bB])|[b])"
 ###shortbytes =  "({quote}{shortbytesitem}*(?P=quotechar))"
 ###longbytes =  "({triquote}longbytesitem*(?P=quotechar))"
 ###shortbytesitem = "({shortbyteschar}|{bytesescapeseq})"
 ###longbytesitem = "({longbyteschar}|{bytesescapeseq})"
 ###shortbyteschar = "(([^\\\n])(?!(?P=quotechar)))"
 ####shortbyteschar = <any ASCII character except "\" or newline or the quote>
 ###longbyteschar = "([^\\])"
 ####longbyteschar = <any ASCII character except "\">
 ###bytesescapeseq = "(\\.)"
 ####bytesescapeseq = "\" <any ASCII character>
 ###
 ###
 ###
 ###
 ###
 ###
 ###### https://docs.python.org/3/reference/lexical_analysis.html#literals
 ###### ^^^ work through this from top to bottom is the next step do it. it's important. once it's done everything will work nicely. encodings and all.
 ###
 ###
 ###
 ###
 ###
 ###
 ###
 ###
 ###
 #### DEVIATION modified to include fstring prefix here and not in the normal string
 ###f_string = "{fstringprefix}{f_string_body}" ## <-- TODO put {quote} stuff there and do triquote stuff etc
 ###f_string_body = "(({literal_char}|(\{\{)|(\}\})|{replacement_field})*)"
 ###fstringprefix = "(([rR][fF])|([fF][rR])|[fF])"
 ###replacement_field = "\{{f_expression}(!{conversion})?(:{format_spec})?\}"
 ###f_expression = (conditional_expression | "*" or_expr) ("," conditional_expression | "," "*" or_expr)* [","] | yield_expression
 ###conversion = "([sra])"
 ###format_spec = (literal_char | NULL | replacement_field)*
 ###literal_char = "([^\{\}])"
#literal_char = <any code point except "{", "}" or NULL>
## i have no idea what NULL means so i ignored it (maybe its a \0)
## "Python reads program text as Unicode code points"

boolliteral ::=
    "True" -> BoolLit(True) # "True" is keyword in python
    "False" -> BoolLit(False)
noneliteral ::=
    "None" -> NoneLit # "None" is a keyword in python
ellipsisliteral ::=
    "." "." "." -> EllipsisLit


parenth_form ::=
    "(" ")" -> Tuple([]) # an empty tuple is defined by its parens
    "(" v:starred_expression ")" -> v

comprehension ::=
    e:expression cf:comp_for -> Comprehension(e,cf)
comp_for ::=
    is_async:["async"] "for" targets:target_list "in" iter:or_test [more:comp_iter] -> CompFor(targets,iter,more,is_async)
comp_iter ::=
    comp_for | comp_if
comp_if ::=
    "if" cond:expression_nocond [more:comp_iter] -> CompIf(cond,more)

list_display ::=
    "[" "]" -> ListDisplay([])
    "[" v:(starred_list | comprehension) "]" -> ListDisplay(v)
set_display ::=
    "{" v:(starred_list | comprehension) "}" -> SetDisplay(v)

dict_display ::=
    "{" "}" -> DictDisplay([])
    "{" v:(key_datum_list | dict_comprehension) "}" -> DictDisplay(v)
key_datum_list ::=
    COMMA_LIST_NONEMPTY(key_datum)
key_datum ::=
    k:expression ":" v:expression -> KVPair(k,v)
    DSTARRED(or_expr)
dict_comprehension ::=
    k:expression ":" v:expression cf:comp_for -> DictComprehension(k,v,cf)

generator_expression ::=
    "(" e:expression cf:comp_for ")" -> GeneratorExpr(e,cf)

yield_atom ::=
    "(" v:yield_expression ")" -> v
yield_expression ::=
    "yield" "from" v:expression -> Yield(v,True)
    "yield" v:expression_list -> Yield(v,False)

@unordered
primary ::=
    atom | attributeref | sub_or_slicing | call
attributeref ::=
    val:primary "." attr:identifier -> Attr(val,attr)

chained_attributeref ::= # x.y.z made up of nothing but identifiers separated by dots
    val:chained_attributeref "." attr:identifier -> Attr(val,attr)
    identifier

# note that if there are no proper slices in the slice list then it's a subscription. We handle this by simply parsing subscription before slicing
sub_or_slicing ::= # ordered!
    subscription | slicing

subscription ::= # note the expression_list evals to a single expression
    val:primary "[" idx:expression_list "]" -> Subscription(val,idx)
slicing ::=
    primary "[" slice_list "]"
slice_list ::=
    COMMA_LIST_NONEMPTY(slice_item)
slice_item ::=
    expression | proper_slice
proper_slice ::=
    [lower:expression] ":" [upper:expression] [ ":" [stride:expression] ] -> Slice(lower,upper,stride)


# note any names in [] (ie optional things) or names in branches not taken will be given the value None
# note that any names anywhere inside a "+"d or "*"d block are lists of values, and if there is cond branch inside a "*" so a value isnt assigned then it becomes None for that iteration in the list. Meaning the list always ends up the same length.

#
# (x:a | x:b) means x will get one value or the other depending on the branch. If a branch doesnt have x than x becomes None
# (x:a | x:b)* means x is a list of length equal to the number of left branches taken plus number of right branches taken.
#

# here i separate into two separate lines so that `args` defaulting to "[]" can be done easily
call ::=
    func:primary "(" comp:comprehension ")" -> Call(func,Args([GeneratorExpr(comp.expr,comp.comp_for)]))
    func:primary args:argument_list -> Call(func,args)


#    There are 3 stages and there's no going backwards:
#    1.Comma-sep list mix of Expr | *Expr
#        (Expr | *Expr) list
#    2.As soons as an ident=Expr shows up, switch to a comma-sep list of (ident=Expr) | *Expr
#        ((ident=Expr) | *Expr) list
#    3.As soon as a **Expr shows up, switch a comma-sep list of (ident=Expr) | **Expr
#        ((ident=Expr) | **Expr) list
#    A trailing comma at the end is okay

keyword_item ::=
    k:identifier "=" v:expression -> KVPair(k,v)

positional_argument ::=
    STARRED(expression) | expression
starred_and_keyword ::=
    STARRED(expression) | keyword_item
keywords_argument ::=
    DSTARRED(expression) | keyword_item

## DEVIATION: my argument_list allows for empty argument lists because it makes it more convenient everywhere, it automatically fills in the "(" ")" for you, and it also allows for a trailing comma by default
pdef argument_list(p,allow_trailing_comma=True):
    stages = [p.positional_argument, p.starred_and_keyword, p.keywords_argument]
    with p.parens():
        return Args(
            p.comma_list(
                *stages,
                nonempty=False,
                ordered=True, # <- important!
                allow_trailing_comma=allow_trailing_comma
                )
            )

# notice how every blue bnf must evaluate to some sort of Py expression which may or may not be used
# btw the rhs after "->" is arbitrary python

await_expr ::=
    "await" v:primary -> AwaitExpr(v)

power(await_expr,primary) ::=
    lhs:(await_expr|primary) "**" rhs:u_expr -> Binop(lhs,Exp,rhs)

@unordered
u_expr(power) ::=
    "-" rhs:u_expr -> Unop(Sub,rhs)
    "+" rhs:u_expr -> Unop(Add,rhs)
    "~" rhs:u_expr -> Unop(Invert,rhs)

@unordered
m_expr(u_expr) ::=
    lhs:m_expr "*" rhs:u_expr -> Binop(lhs,Mul,rhs)
    lhs:m_expr "@" rhs:m_expr -> Binop(lhs,MatMul,rhs)
    lhs:m_expr "//" rhs:u_expr -> Binop(lhs,FloorDiv,rhs)
    lhs:m_expr "/" rhs:u_expr -> Binop(lhs,Div,rhs)
    lhs:m_expr "%" rhs:u_expr -> Binop(lhs,Mod,rhs)

@unordered
a_expr(m_expr) ::=
    lhs:a_expr "+" rhs:m_expr -> Binop(lhs,Add,rhs)
    lhs:a_expr "-" rhs:m_expr -> Binop(lhs,Sub,rhs)

@unordered
shift_expr(a_expr) ::=
    lhs:shift_expr "<<" rhs:a_expr -> Binop(lhs,ShiftL,rhs)
    lhs:shift_expr ">>" rhs:a_expr -> Binop(lhs,ShiftR,rhs)

and_expr(shift_expr) ::=
    lhs:and_expr "&" rhs:shift_expr -> Binop(lhs,BitAnd,rhs)
xor_expr(and_expr) ::=
    lhs:xor_expr "^" rhs:and_expr -> Binop(lhs,BitXor,rhs)
or_expr(xor_expr) ::=
    lhs:or_expr "|" rhs:xor_expr -> Binop(lhs,BitOr,rhs)

comparison(or_expr) ::=
    v1:or_expr (v2:op_and_val)+ -> Comparison([v1,*[tup[0] for tup in v2]],[tup[1] for tup in v2])

@unordered
#@quickcheck(lambda line: any([line.startswith(op) for op in ["<",">","==",">=","<=","!=","is","in","not"]]))
op_and_val ::=
    op:cmpop v:or_expr -> op,v

@unordered
cmpop ::=
    "<" -> LT
    ">" -> GT
    "==" -> EQ
    ">=" -> GEQ
    "<=" -> LEQ
    "!=" -> NEQ
    "is" "not" -> ISNOT
    "is" -> IS
    "not" "in" -> NOTIN
    "in" -> IN


conditional_expression(or_test) ::=
    if_val:or_test "if" cond:or_test "else" else_val:expression -> Ternary(cond,if_val,else_val)
expression(conditional_expression) ::=
    lambda_expr
expression_nocond(or_test) ::=
    lambda_expr_nocond

lambda_expr ::=
    "lambda" ":" body:expression -> Lambda(Params([]),body)
    "lambda" params:parameter_list(allow_annotations=False,parens=False) ":" body:expression -> Lambda(params,body)
lambda_expr_nocond ::=
    "lambda" ":" body:expression_nocond -> Lambda(Params([]),body)
    "lambda" params:parameter_list(allow_annotations=False,parens=False) ":" body:expression_nocond -> Lambda(params,body)

expression_list ::=
    v:COMMA_LIST_NONEMPTY_HASCOMMA(expression) -> Tuple(v)
    expression
starred_list ::= # used in places where you don't want to eval the list into a Tuple you just want to keep it as a list
    COMMA_LIST_NONEMPTY(starred_item)
# I disagree with the official BNF for starred_expression, which accepts the empty string as valid. This would imply that you could do assignment to the empty string which is not allowed, so clearly starred_expression should be a NONEMPTY list not allowing for emptiness.
starred_expression(expression) ::= # returns an Expr (may be a Tuple)
    v:COMMA_LIST_NONEMPTY_HASCOMMA(starred_item) -> Tuple(v)
    starred_item # no comma. must come after hascomma version!
starred_item ::=
    expression | STARRED(or_expr)


@unordered
simple_stmt ::=
    assert_stmt
    augmented_assignment_stmt
    annotated_assignment_stmt
    pass_stmt
    del_stmt
    return_stmt
    yield_stmt
    raise_stmt
    break_stmt
    continue_stmt
    import_stmt
    future_stmt
    global_stmt
    nonlocal_stmt
    assignment_stmt
    expression_stmt


expression_stmt ::=
    v:starred_expression -> ExprStmt(v)

assignment_stmt ::=
    (target_lists:target_list "=")+ val:(starred_expression | yield_expression) -> Asn(target_lists,val)
target_list ::= # since Targets can old target_lists internally we might as well make the overall target list a single Target
    v:COMMA_LIST_NONEMPTY(target) -> Target(v)

@unordered
target ::=
    v:identifier -> Target(v)
    "(" ")" -> Target([]) # empty target list -- note "() = ()" is valid code, despite doing nothing.
    "[" "]" -> Target([]) # empty target list
    "(" v:target_list ")" -> v # target_list yields a Target
    "[" v:target_list "]" -> v
    v:attributeref -> Target(v)
    v:subscription -> Target(v)
    v:slicing -> Target(v)
    v:STARRED(target) -> Target(v)

augmented_assignment_stmt ::=
    tar:augtarget op:augop val:(expression_list | yield_expression) -> AugAsn(tar,op,val)
@unordered
augtarget ::=
    v:identifier -> Target(v)
    v:attributeref -> Target(v)
    v:sub_or_slicing -> Target(v)
augop ::=
    NO_TRAILING_WS(v:augop_noeq) "=" -> v
@unordered
augop_noeq ::=
    "+" -> Add
    "-" -> Sub
    "*" -> Mul
    "@" -> MatMul
    "/" -> Div
    "//" -> FloorDiv
    "%" -> Mod
    "**" -> Exp
    ">>" -> ShiftR
    "<<" -> ShiftL
    "&" -> BitAnd
    "^" -> BitXor
    "|"-> BitOr

annotated_assignment_stmt ::=
    tar:augtarget ":" typ:expression ["=" val:expression] -> AnnAsn(Annotated(tar,typ),val)

assert_stmt ::= 
    "assert" v:expression ["," msg:expression] -> Assert(v,msg)

pass_stmt ::= 
    "pass" -> Pass()

del_stmt ::=  
    "del" v:target_list -> Del(v)

return_stmt ::= 
    "return" v:expression_list -> Return(v)
    "return" -> Return(NoneLit())

yield_stmt ::=
    v:yield_expression -> ExprStmt(v)

raise_stmt ::=  
    "raise" [v1:expression ["from" v2:expression]] -> Raise(v1,v2)

break_stmt ::=  
    "break" -> Break()

continue_stmt ::=  
    "continue" -> Continue

import_stmt ::=  
    "import" mods:COMMA_LIST_NONEMPTY_NOTRAILING(OR_ALIAS(module)) -> Import(mods)
    "from" mod:relative_module "import" names:COMMA_LIST_NONEMPTY_NOTRAILING(str_or_alias) -> FromImport(mod,names)
    "from" mod:relative_module "import" "(" names:COMMA_LIST_NONEMPTY(str_or_alias) ")" -> FromImport(mod,names)
    "from" mod:module "import" "*" -> FromImport(mod,Starred(None))

module ::=
    v:dotted_name -> ModulePath(v,0)
relative_module ::=
    NO_TRAILING_WS((dots:".")*) mod:module -> ModulePath(mod.names,len(dots)) # 
    NO_TRAILING_WS((dots:".")*) "." -> ModulePath("",len(dots)+1)

future_stmt ::= 
    "from" "__future__" "import" v:COMMA_LIST_NONEMPTY_NOTRAILING(str_or_alias) -> Future(v)
    "from" "__future__" "import" "(" v:COMMA_LIST_NONEMPTY(str_or_alias) ")" -> Future(v)

str_or_alias ::=
    OR_ALIAS(identifier)

global_stmt ::=
    "global" v:COMMA_LIST_NONEMPTY(identifier) -> Global(v)

nonlocal_stmt ::=
    "nonlocal" v:COMMA_LIST_NONEMPTY(identifier) -> Nonlocal(v)


@unordered
compound_stmt ::=
    if_stmt
    while_stmt
    for_stmt
    try_stmt
    with_stmt
    funcdef
    classdef

# this is called right after ":" for compound_stmts.
suite ::=
    stmts:stmt_list newline -> Suite(stmts) # a;b;c style suite, ended by newline. yields SimpleChain.
    newline INDENTED((stmts:statement)+) -> Suite(stmts) # indented and newline separated style suite. yields [CompoundStmt|SimpleChain]

# the minimum complete unit the interpreter can process
statement ::= # returns SimpleChain | CompoundStmt
    s:stmt_list newline -> s
    compound_stmt # often has a suite for the body

stmt_list ::= # returns [SimpleStmt]
    s1:simple_stmt (";" s2:simple_stmt)* [";"] -> SimpleChain([s1,*s2])

if_stmt ::= 
    "if" cond:expression ":" body:suite ("elif" elif_conds:expression ":" elif_bodies:suite)* ["else" ":" else_body:suite] -> If(cond,body,elif_conds,elif_bodies,else_body)

while_stmt ::=
    "while" cond:expression ":" body:suite ["else" ":" else_body:suite] -> While(cond,body,else_body)

for_stmt ::=
    is_async:["async"] "for" tar:target_list "in" iter:expression_list ":" body:suite ["else" ":" else_body:suite] -> For(tar,iter,body,else_body,is_async)

try_stmt ::=
    "try" ":" body:suite ("except" [excs:OR_ALIAS(expression)] ":" except_bodies:suite)+ ["else" ":" else_body:suite] ["finally" ":" finally_body:suite] -> Try(body,excs,except_bodies,else_body,finally_body)
    "try" ":" body:suite "finally" ":" finally_body:suite -> Try(body,[],[],None,finally_body)

with_stmt ::=
    is_async:["async"] "with" withitems:COMMA_LIST_NONEMPTY(with_item) ":" body:suite -> With(withitems,body,is_async)
with_item ::=
    v:expression "as" tar:target -> WithItem(v,tar)
    v:expression -> WithItem(v,None)


decorator ::=
    "@" v:chained_attributeref args:argument_list newline -> Decorator(v,args)
    "@" v:chained_attributeref newline -> Decorator(v,None)




# "If a parameter has a default value, all following parameters up until the “*” must also have a default value — this is a syntactic restriction that is not expressed by the grammar." (from Python LRM) -> we aim to fix this in our BNF grammaer

#    There are 6 stages and there's no going backwards:
#    Btw the BNF grammar fails to capture the fact that defaulted args can only come after nondefaulted args
#    param ::= ident [":" Expr]
#    1. param list
#    2. (param=Expr) list
#    3. *param | *
#    4. param list
#    5. (param=Expr) list
#    6. **param | **
#    A trailing comma at the end is okay
#    Any of these can have an annotation like ident:expression or ident:expression=expression

parameter ::= # returns (str|Annotated)
    name:identifier ":" type:expression -> Annotated(name,type)
    identifier
parameter_noann ::=
    identifier

# DEVIATION from LRM which lets defparameter alternatively be a normal parameter
defparameter ::=
    k:parameter "=" v:expression -> KVPair(k,v)
defparameter_noann ::=
    k:parameter_noann "=" v:expression -> KVPair(k,v)

## DEVIATION: my parameter_list allows for empty parameter lists because it makes it more convenient everywhere, fills in the "(" ")" for you by default (toggle with `parens`), and it also allows for a trailing comma
pdef parameter_list(p,allow_annotations=True,parens=True):
    param = p.parameter_noann if not allow_annotations else p.parameter
    defparam = p.defparameter_noann if not allow_annotations else p.defparameter
    stages = [param, defparam, p.once(p.starparam), param, defparam, p.once(p.dstarparam)]
    with p.maybe_cm(p.parens,parens):
        return Args(
            p.comma_list(
                *stages,
                nonempty=False,
                ordered=True, # <- important!
                allow_trailing_comma=False
                )
            )

starparam ::=
    STARRED(parameter)
    STARRED(pass)
dstarparam ::=
    DSTARRED(parameter)
    DSTARRED(pass)

funcdef ::= 
    [(decos:decorator)+] is_async:["async"] "def" fname:identifier params:parameter_list ["->" return_ann:expression] ":" body:suite -> FuncDef(fname,params,body,decos,is_async,return_ann)
classdef ::=
    [(decos:decorator)+] "class" cname:identifier ["(" ")"] ":" body:suite -> ClassDef(cname,body,None,decos)
    [(decos:decorator)+] "class" cname:identifier args:argument_list(allow_trailing_comma=False) ":" body:suite -> ClassDef(cname,body,args,decos)

